package com.lifang.agentsm.controller;import java.io.IOException;import java.net.InetAddress;import java.net.UnknownHostException;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.lifang.mipushsoa.facade.MiPushSOAServer;import com.lifang.sms.model.SmsBusinessResponse;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import com.lifang.agentcommsoa.enums.RewardEnum;import com.lifang.agentcommsoa.service.AgentCommonService;import com.lifang.agentsm.base.controller.BaseController;import com.lifang.agentsm.entity.HouseImage;import com.lifang.agentsm.entity.HouseImageAudit;import com.lifang.agentsm.entity.HouseInfo;import com.lifang.agentsm.entity.LfEmployee;import com.lifang.agentsm.model.enums.MessageTypeEnum;import com.lifang.agentsm.service.HouseImageService;import com.lifang.client.PushSOA;import com.lifang.housesoa.facade.service.HouseService;import com.lifang.housesoa.model.HouseDetailInfo;import com.lifang.housesoa.model.ReloadEnum;import com.lifang.model.enums.MessageEnum;import com.lifang.mqservice.client.MsgQueueSenderClient;import com.lifang.mqservice.model.MqMessage;import com.lifang.sms.model.SmsSendRequest;import com.lifang.sms.service.SmsDubboService;import com.lifang.utils.WebTool;@Controller@RequestMapping("/houseImage")public class HouseImageController extends BaseController {    @Autowired    private HouseImageService houseImageService;    @Autowired    private HouseService houseSOAClient;    @Autowired    private MiPushSOAServer pc;    @Autowired    private SmsDubboService smsClient;    @Autowired    private MsgQueueSenderClient mqSenderClient;    @Autowired    private AgentCommonService agentCommonService;    /**     *     * @Title: getEmployeeList     * @Description: 跳转到房源图片页面     * @param @param request    * @param @param response    * @param @param houseId    * @param @return    设定文件     * @return Object    返回类型     * @throws     */    @RequestMapping(value = "/gotoHouseImage.action", method = { RequestMethod.GET, RequestMethod.POST })    public Object getEmployeeList(HttpServletRequest request, HttpServletResponse response,Integer houseId,Integer type) {        HouseDetailInfo houseinfoList = houseImageService.getAllHouseInfo(houseId);        if(houseinfoList != null)        {            request.setAttribute("houseinfo", houseinfoList);            request.setAttribute("cImageList", houseinfoList.getAImageList());        }        request.setAttribute("houseId", houseId);        if(type != null && type > 0)        {            request.setAttribute("type", type);        }        else        {            request.setAttribute("type", 2);        }                return "house/houseImage";    }        /**     *     * @Title: uploadHouseImage     * @Description: 上传图片并添加数据库的本地记录    * @param @param request    * @param @param response    * @param @return    设定文件     * @return Object    新增的图片类型     * @throws     */   @RequestMapping(value = "/uploadHouseImage.action", method = {RequestMethod.GET, RequestMethod.POST})   @ResponseBody   public Object uploadHouseImage(HttpServletRequest request,HttpServletResponse  response)   {      //转型为MultipartHttpRequest(重点的所在)         MultipartHttpServletRequest multipartRequest  =  (MultipartHttpServletRequest) request;         //  获得第1张图片（根据前台的name名称得到上传的文件）          MultipartFile imgFile1  =  multipartRequest.getFile("file");         String typeStr = request.getParameter("type");       String houseIdStr = request.getParameter("houseId");       int type = Integer.parseInt(typeStr);       Integer houseId = Integer.parseInt(houseIdStr);       LfEmployee employee= new LfEmployee();	try {		employee = this.getLoginEmployeeInfo(request.getSession());	} catch (Exception e) {		// TODO Auto-generated catch block		e.printStackTrace();	}       Map<String,Object> pars = new HashMap<String, Object>();       pars.put("type", type);       pars.put("houseId", houseId);       return houseImageService.uploadSingleFile(imgFile1, employee, pars);   }      /**    *    * @Title: updateHouseImageType    * @Description: 更改图片的类型   * @param @param request   * @param @param response   * @param @param id   * @param @param type   * @param @return    设定文件    * @return Object    返回类型    * @throws    */   @RequestMapping(value = "/updateHouseImageType.action", method={RequestMethod.GET, RequestMethod.POST})   @ResponseBody   public Object updateHouseImageType(HttpServletRequest request,HttpServletResponse response,String key,Integer type,String houseId)   {       HouseImage image = new HouseImage();       image.setImgKey(key);       image.setType(type);       image.setHouseId(Integer.parseInt(houseId));       return houseImageService.updateImageType(image);   }      /**    *    * @Title: removeHouseImage    * @Description: 删除图片   * @param @param request   * @param @param response   * @param @param id   * @param @return    设定文件    * @return Object    返回类型    * @throws    */   @RequestMapping(value = "/removeHouseImage.action", method={RequestMethod.GET,RequestMethod.POST})   @ResponseBody   public Object removeHouseImage(HttpServletRequest request,HttpServletResponse response,String key,String houseId,Integer type)   {       return houseImageService.removeHouseImage(key, Integer.parseInt(houseId));   }    private void processParam(Map<String, Object> pars) {        int pageIndex = 0;        int pageSize = 0;        try {            pageIndex = Integer.parseInt(pars.get("pageIndex") + "");            pageSize = Integer.parseInt(pars.get("pageSize") + "");        } catch (Exception e) {            e.printStackTrace();        }        int start = pageIndex * pageSize;        int end = (pageIndex + 1) * pageSize;        pars.put("start", start);        pars.put("end", end);    }    /**     * 功能描述:跳转到图片审核页面     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @return     */    @RequestMapping(value = "/gotohouseimageaudit.action")    public String gotoEmployeeList(HttpServletRequest request, HttpServletResponse response) {        return "house/houseImageAudit";    }                /**     * 功能描述:// 跳转到房东图片审核页面     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @return     */    @RequestMapping(value = "/gotoLandlordImageaudit.action")    public String gotoLandlordImageaudit(HttpServletRequest request, HttpServletResponse response) {        return "house/landlordImageAudit";    }        /**     * 功能描述://下拉小区名     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @return     */    @RequestMapping(value = "/getHouseName.action",method={RequestMethod.GET,RequestMethod.POST})	@ResponseBody	public List<HouseInfo> getHouseName(){//		getPars(pars);		return houseImageService.getEstateName();	}                /**     * 功能描述://加载图片审核列表 --经纪人     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @param pars     * @return     */    @RequestMapping(value = "/getImageAuditList.action")  	@ResponseBody  	public Object getImageAuditList(HttpServletRequest request,HttpServletResponse response,@RequestParam Map<String, Object> pars){    	processMiniParam(pars);    			LfEmployee employee= new LfEmployee();		try {			employee = getLoginEmployeeInfo(request.getSession());		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		pars.put("agentCode",employee.getId());		pars.put("agentCity", employee.getCityId());  		return houseImageService.getImageAuditList(pars);  	}          /**     * 功能描述://加载图片审核列表 --房东     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @param pars     * @return     */    @RequestMapping(value = "/getlandlordImageAuditList.action")  	@ResponseBody  	public Object getlandlordImageAuditList(HttpServletRequest request,HttpServletResponse response,@RequestParam Map<String, Object> pars){    	processMiniParam(pars);    			//LfEmployee employee = getLoginEmployeeInfo(request.getSession());		pars.put("agentCode","");  		return houseImageService.getImageAuditList(pars);  	}        /**     * 功能描述://跳转图片审核详情页     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param pars     * @return     */    @RequestMapping(value = "/gotohouseimageauditdetails.action",method={RequestMethod.GET,RequestMethod.POST})    public String gotoHouseImageAuditDetails(HttpServletRequest request,@RequestParam Map<String, Object> pars) {    	request.setAttribute("agentId", pars.get("agentId"));    	    	request.setAttribute("houseId", pars.get("houseId"));    	request.setAttribute("mobile", pars.get("mobile"));    	request.setAttribute("guestId", pars.get("guestId"));    	request.setAttribute("auditStatus", pars.get("auditStatus"));    	request.setAttribute("phoneNum", pars.get("phoneNum"));    	    	String sellPoint = houseImageService.findSellPointById(pars);    	    	if(sellPoint == null ||"null".equals(sellPoint) || "".equals(sellPoint)){    		sellPoint = "";    	}    	request.setAttribute("sellPoint", sellPoint);    	    	request.setAttribute("createTime", pars.get("createTime"));        return "house/houseImageAuditDetails";    }            /**     * 功能描述://加载图片     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @param pars     * @return     */    @RequestMapping(value = "/loadHouseImage.action", method={RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public Object loadHouseImage(HttpServletRequest request,HttpServletResponse response, @RequestParam Map<String, Object> pars)    {    	List<HouseImageAudit> hiaList = houseImageService.selectImageByhouseId(pars);//    	Map<String,List<HouseImageAudit>> map = new HashMap<String,List<HouseImageAudit>>();//    	map.put("lists", hiaList);    	JSONArray jsonarray = JSONArray.fromObject(hiaList);      	try {    		System.out.println(jsonarray.toString());			response.getWriter().write(jsonarray.toString());		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		};        return null;    }          /**     * 功能描述://图片审核     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @param pars     * @return     */    @RequestMapping(value = "/updateAudit.action")    @ResponseBody    public Object updateAudit(HttpServletRequest request,HttpServletResponse response, @RequestParam Map<String, Object> pars)    {    	String result = null;    	try{			//审核通过的时候判断			String flag = pars.get("flag")+"";			if("0".equals(flag)){				int counts = houseImageService.findHouseById(pars);				if (counts > 0){					result = "1000";					try {						System.out.println(result);						response.getWriter().write(result);					} catch (IOException e) {						// TODO Auto-generated catch block						e.printStackTrace();					};					return null;				}			}    		LfEmployee employee = getLoginEmployeeInfo(request.getSession());    		pars.put("employeeId", employee.getId());    		String mark = pars.get("mark")+"";    		String rejectreason = pars.get("rejectreason")+"";    		try{    			rejectreason = java.net.URLDecoder.decode(rejectreason , "UTF-8");    			mark = java.net.URLDecoder.decode(mark , "UTF-8");    		}    		catch(Exception e){    			e.printStackTrace();    		} //    		pars.put("rejectreason",rejectreason);    		String errors = "";    		if(!"null".equals(rejectreason) && rejectreason != null && !"".equals(rejectreason)){        		String[] error = rejectreason.split(",");        		for(String s : error){        			if("1".equals(s)){        				errors += "图片质量差、";        				continue;        			}        			if("2".equals(s)){        				errors += "图片不齐全、缺图、";        				continue;        			}        			if("3".equals(s)){        				errors += "图片重复、";        				continue;        			}        			if("4".equals(s)){        				errors += "图片放置位置不对、";        				continue;        			}        			if("5".equals(s)){        				errors += "图片有水印、";        				continue;        			}        		}        		errors = errors.substring(0,errors.length()-1);    			pars.put("rejectreason",errors);    		}    		if(!"null".equals(mark) && mark != null && !"".equals(mark)){    			errors += ". 驳回说明:"+mark;    			pars.put("rejectreason",errors);    		}    		    		//图片审核更新逻辑    		int pass = houseImageService.updateAudit(pars);    		String mobile = pars.get("mobile")+"";    		    		    		List<String> mobileList = new ArrayList<String>();    		String token = pars.get("token")+"";    		List<String> tokenList = new ArrayList<String>();    		tokenList.add(token);    		mobileList.add(mobile);    		String title = "";            if (pass == 1){                title = "实景人审核通知";            }else{                title = "图片审核";            }            List<Integer> houseIdList = new ArrayList<Integer>();            houseIdList.add(Integer.valueOf(pars.get("houseId").toString()));    		houseSOAClient.reloadMemcachedDetail(ReloadEnum.houseresource, houseIdList);            String message = null;            String rooms = houseImageService.findRoomById(pars);    		if("0".equals(flag)){                if (pass == 1) {                    message = "Hi，你已成为 " + rooms + " 的实景人啦！";                }else{                    message = "Hi，你上传的 " + rooms + " 照片已经审核通过啦！";                }                agentCommonService.rewardWuKongCoin(Integer.valueOf(pars.get("agentId").toString()), RewardEnum.pictureChecked, Integer.valueOf(pars.get("houseId").toString()));    			int[] houseId = {Integer.parseInt(pars.get("houseId")+"")};    			sendHouseRentPrice(houseId,"1");    			    		}else{    			message = "您上传的:"+rooms+"房源图片因为"+errors+"审核失败，请重新上传";    			//如果是房东审核,就发送短信.    			if(!"null".equals(pars.get("phoneNum")) && !"".equals(pars.get("phoneNum")) && pars.get("phoneNum") != null){//	    			smsClient.sendBusiness(pars.get("phoneNum")+"", 2, "37938", "");	    			SmsSendRequest sms = new SmsSendRequest();	    			sms.setMobile(pars.get("phoneNum")+"");	    			sms.setMsgSource(2);	    			sms.setModelId("37938");	    			sms.setParam("");	    			smsClient.sendBusiness(sms);	    		}				int[] houseId = {Integer.parseInt(pars.get("houseId")+"")};				sendHouseRentPrice(houseId,"0");    		}    		//图片审核通过发送消息给android    		if("null".equals(pars.get("guestId")) || "".equals(pars.get("guestId")) || pars.get("guestId") == null){				pc.sendMessage(mobileList, title, message, null, 2, 0, MessageTypeEnum.AUDIT.getCode());//.sendAndroidNotification(mobileList, title,    		}    		result = "1";    	}catch(Exception e){    		System.out.println("图片审核通过更新失败!!");    		result = "0";    		e.printStackTrace();    	}    	try {    		System.out.println(result);			response.getWriter().write(result);		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		};        return null;    }      /**     * 功能描述://驳回发送消息     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @param pars     * @return     */    @RequestMapping(value = "/sendMessage.action")    @ResponseBody    public Object sendMessage(HttpServletRequest request,HttpServletResponse response, @RequestParam Map<String, Object> pars)    {    	String result = "0";    	try{    		String mobile = pars.get("mobile")+"";    		List<String> mobileList = new ArrayList<String>();    		String token = pars.get("token")+"";    		List<String> tokenList = new ArrayList<String>();    		tokenList.add(token);    		mobileList.add(mobile);    		String title = "图片审核通知";    		String message = "对不起,您提交的图片审核失败!";    		//图片审核通过发送消息给android			pc.sendMessage(mobileList, title, message, null, 2, 0, MessageTypeEnum.AUDIT.getCode());//.sendAndroidNotification(mobileList, title,    		//pc.sendYFYKMsg(mobileList, title, message, MessageTypeEnum.AUDIT.getCode(), 0, "", 0, null);//.sendAndroidNotification(mobileList, title, message, "0", "");    		    		result = "1";    		response.getWriter().write(result);    	}catch(Exception e){    		System.out.println("图片审核通过更新失败!!");    		e.printStackTrace();    		try {				response.getWriter().write(result);			} catch (IOException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}    	}        return null;    }        private LfEmployee changeJsonToObject(String jsonStr)    {        JSONArray new_jsonArray=JSONArray.fromObject(jsonStr);          Collection java_collection=JSONArray.toCollection(new_jsonArray);          if(java_collection!=null && !java_collection.isEmpty())          {              Iterator it=java_collection.iterator();              while(it.hasNext())              {                  JSONObject jsonObj=JSONObject.fromObject(it.next());                  LfEmployee employee=(LfEmployee) JSONObject.toBean(jsonObj,LfEmployee.class);                  return employee;            }          }         return null;    }        /**     * 功能描述:// 跳转到图片驳回弹窗     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param request     * @param response     * @return     */    @RequestMapping(value = "/openRejectedPage")    public String openRejectedPage(HttpServletRequest request, HttpServletResponse response) {        return "house/rejectedPage";    }        /**     * 功能描述://发送mq     *     * <pre>     * Modify Reason:(修改原因,不需覆盖，直接追加.)     *     luogq:   2015年12月4日      新建     * </pre>     *     * @param houseId     */    public void sendHouseRentPrice(int [] houseId,String isSuccess) {                MqMessage msg = new MqMessage();        msg.setMsgTopic(MessageEnum.MsgSubTopics.house_image);        msg.setMsgType(MessageEnum.MsgType.update);        try {            msg.setIp(WebTool.ip2Int(InetAddress.getLocalHost().getHostAddress()));        } catch (UnknownHostException e) {            logger.error("获取本机ip异常！",e);        }        JSONObject json = new JSONObject();        json.put("ids", houseId);        json.put("dtype", "houseId");		json.put("isSuccess",isSuccess);//1审核成功,0审核失败        msg.setMemo(json.toString());        try {            mqSenderClient.sendMessage(msg);        } catch (Exception e) {            logger.error("调用发消息接口失败：",e);        }     }}